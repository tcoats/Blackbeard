// Generated by CoffeeScript 1.6.3
(function() {
  define(['knockout', 'jquery'], function(ko, $) {
    return {
      init: function(requirejs, config) {
        if (config.slider) {
          return requirejs(['slider'], function(Slider) {
            return ko.bindingHandlers.slider = {
              init: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var bind, wait;
                bind = function() {
                  var slider, slidergroup, sliders;
                  $(element).append($('<div/>').addClass('handle').append($('<div />').addClass('slide')));
                  slider = $(element).data('slider');
                  if (slider == null) {
                    slider = new Slider(element, {
                      vertical: true,
                      horizontal: false,
                      y: valueAccessor()()
                    });
                    $(element).data('slider', slider);
                  }
                  slidergroup = $(element).parents('.slider-group');
                  setTimeout(function() {
                    slider.setWrapperOffset();
                    slider.setBounds();
                    return slider.update();
                  }, 200);
                  if (!slidergroup.length) {
                    slider.animationCallback = function(x, y) {
                      return valueAccessor()(slider.value.target[1]);
                    };
                    return;
                  }
                  sliders = slidergroup.data('sliders');
                  if (sliders == null) {
                    sliders = [];
                  }
                  sliders.push(slider);
                  slidergroup.data('sliders', sliders);
                  return slider.animationCallback = function(x, y) {
                    var alltotal, current, currenty, other, others, otherstotal, scale, split, totaldifference, _i, _j, _k, _len, _len1, _len2, _results;
                    valueAccessor()(y);
                    current = this;
                    others = sliders.filter(function(s) {
                      return s !== current;
                    });
                    otherstotal = 0;
                    for (_i = 0, _len = others.length; _i < _len; _i++) {
                      other = others[_i];
                      otherstotal += other.value.current[1];
                    }
                    alltotal = otherstotal + y;
                    totaldifference = alltotal - 1.0;
                    if (otherstotal === 0) {
                      split = totaldifference / others.length;
                      for (_j = 0, _len1 = others.length; _j < _len1; _j++) {
                        other = others[_j];
                        currenty = other.value.current[1];
                        other.setValue(x, currenty - split, true);
                      }
                      return;
                    }
                    _results = [];
                    for (_k = 0, _len2 = others.length; _k < _len2; _k++) {
                      other = others[_k];
                      currenty = other.value.current[1];
                      scale = currenty / otherstotal;
                      _results.push(other.setValue(x, currenty - scale * totaldifference, true));
                    }
                    return _results;
                  };
                };
                wait = function() {
                  return setTimeout(function() {
                    if ($(element).is(':visible')) {
                      return bind();
                    } else {
                      return wait();
                    }
                  }, 10);
                };
                return wait();
              },
              update: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                var slider, value;
                slider = $(element).data('slider');
                if (slider == null) {
                  return;
                }
                value = ko.utils.unwrapObservable(valueAccessor());
                if (slider.value.target[1] !== value) {
                  return slider.setValue(0, value);
                }
              }
            };
          });
        }
      }
    };
  });

}).call(this);
