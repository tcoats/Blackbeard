// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['q', 'knockout', 'odo/auth', 'components/dialog'], function(Q, ko, auth, Dialog) {
    var LocalResetPassword;
    return LocalResetPassword = (function() {
      function LocalResetPassword() {
        this.forgot = __bind(this.forgot, this);
        this.changePassword = __bind(this.changePassword, this);
        this.activate = __bind(this.activate, this);
        this.shake = __bind(this.shake, this);
        this.isTokenValid = ko.observable(false);
        this.result = ko.observable(null);
        this.token = ko.observable(null);
        this.password = ko.observable('').extend({
          required: true,
          pattern: {
            params: '^.{8,}$',
            message: 'Eight or more letters for security'
          }
        });
        this.confirmPassword = ko.observable('').extend({
          equal: {
            params: this.password,
            message: 'Type the same password here'
          }
        });
        this.errors = ko.validation.group(this);
      }

      LocalResetPassword.prototype.shouldShake = ko.observable(false);

      LocalResetPassword.prototype.shake = function() {
        this.shouldShake(true);
        return setTimeout((function(_this) {
          return function() {
            return _this.shouldShake(false);
          };
        })(this), 1000);
      };

      LocalResetPassword.prototype.activate = function(options) {
        var activationData, dfd;
        this.wizard = options.wizard, activationData = options.activationData;
        this.token(activationData.token);
        dfd = Q.defer();
        auth.checkResetToken(this.token()).then((function(_this) {
          return function(result) {
            _this.isTokenValid(result.isValid);
            _this.result(result);
            return dfd.resolve(true);
          };
        })(this)).fail((function(_this) {
          return function() {
            return dfd.resolve(false);
          };
        })(this));
        return dfd.promise;
      };

      LocalResetPassword.prototype.changePassword = function() {
        if (this.isValidating()) {
          return;
        }
        if (!this.isValid()) {
          this.shake();
          this.errors.showAllMessages();
          return;
        }
        return auth.resetPasswordWithToken(this.token(), this.password()).then((function(_this) {
          return function() {
            return _this.wizard.forward({
              model: 'views/auth/localreset/result',
              activationData: _this.result()
            })();
          };
        })(this));
      };

      LocalResetPassword.prototype.forgot = function() {
        return new Dialog({
          model: 'views/auth/forgot'
        }).show();
      };

      return LocalResetPassword;

    })();
  });

}).call(this);
