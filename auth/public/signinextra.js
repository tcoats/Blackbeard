// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['knockout', 'q', 'odo/auth', 'plugins/router'], function(ko, Q, auth, router) {
    var SigninExtra;
    ({
      title: "Username and email address"
    });
    return SigninExtra = (function() {
      SigninExtra.prototype.user = ko.observable(null);

      SigninExtra.prototype.shouldShake = ko.observable(false);

      function SigninExtra() {
        this.assignUsernameAndEmailAddress = __bind(this.assignUsernameAndEmailAddress, this);
        this.assignEmailAddress = __bind(this.assignEmailAddress, this);
        this.assignUsername = __bind(this.assignUsername, this);
        this.shake = __bind(this.shake, this);
        this.activate = __bind(this.activate, this);
        var _this = this;
        this.email = ko.observable('').extend({
          required: true,
          email: true
        });
        this.username = ko.observable('').extend({
          required: true,
          validation: {
            async: true,
            validator: function(val, param, callback) {
              if ((_this.user().username != null) && _this.user().username === val) {
                callback({
                  isValid: true,
                  message: 'Same username as existing'
                });
                return;
              }
              return auth.getUsernameAvailability(val).then(function(availibility) {
                return callback({
                  isValid: availibility.isAvailable,
                  message: availibility.message
                });
              });
            }
          }
        });
        this.errors = ko.validation.group(this);
      }

      SigninExtra.prototype.activate = function() {
        var dfd,
          _this = this;
        dfd = Q.defer();
        auth.getUser().then(function(user) {
          _this.user(user);
          if ((user.google != null) && user.google.profile.emails.length > 0) {
            _this.email(user.google.profile.emails[0].value);
          }
          if (user.username != null) {
            _this.username(user.username);
          }
          return dfd.resolve(true);
        });
        return dfd.promise;
      };

      SigninExtra.prototype.shake = function() {
        var _this = this;
        this.shouldShake(true);
        return setTimeout(function() {
          return _this.shouldShake(false);
        }, 1000);
      };

      SigninExtra.prototype.assignUsername = function() {
        return auth.assignUsernameToUser(this.user().id, this.username());
      };

      SigninExtra.prototype.assignEmailAddress = function() {
        return auth.createVerifyEmailAddressToken(this.email());
      };

      SigninExtra.prototype.assignUsernameAndEmailAddress = function() {
        var tasks,
          _this = this;
        if (this.isValidating()) {
          return;
        }
        if (!this.isValid()) {
          this.shake();
          this.errors.showAllMessages();
          return;
        }
        tasks = [];
        if (this.user().username !== this.username()) {
          tasks.push(this.assignUsername());
        }
        if (this.user().email !== this.email()) {
          tasks.push(this.assignEmailAddress());
        }
        return Q.allSettled(tasks).then(function() {
          return router.navigate("#user/" + (_this.username()));
        });
      };

      return SigninExtra;

    })();
  });

}).call(this);
