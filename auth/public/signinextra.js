// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['knockout', 'q', 'odo/auth', 'odo/auth/current-user', 'plugins/router'], function(ko, Q, auth, user, router) {
    var SigninExtra;
    return SigninExtra = (function() {
      SigninExtra.prototype.title = "Username and email address";

      function SigninExtra() {
        this.assignUsernameAndEmailAddress = __bind(this.assignUsernameAndEmailAddress, this);
        this.assignEmailAddress = __bind(this.assignEmailAddress, this);
        this.assignUsername = __bind(this.assignUsername, this);
        this.shake = __bind(this.shake, this);
        this.activate = __bind(this.activate, this);
        this.user = ko.observable(null);
        this.shouldShake = ko.observable(false);
        this.email = ko.observable('').extend({
          required: true,
          email: true
        });
        this.username = ko.observable('').extend({
          required: true,
          validation: {
            async: true,
            validator: (function(_this) {
              return function(val, param, callback) {
                if ((_this.user().username != null) && _this.user().username === val) {
                  callback({
                    isValid: true,
                    message: 'Same username as existing'
                  });
                  return;
                }
                return auth.getUsernameAvailability(val).then(function(availibility) {
                  return callback({
                    isValid: availibility.isAvailable,
                    message: availibility.message
                  });
                });
              };
            })(this)
          }
        });
        this.errors = ko.validation.group(this);
      }

      SigninExtra.prototype.activate = function() {
        this.user(user);
        if ((user.google != null) && user.google.profile.emails.length > 0) {
          this.email(user.google.profile.emails[0].value);
        }
        if (user.username != null) {
          return this.username(user.username);
        }
      };

      SigninExtra.prototype.shake = function() {
        this.shouldShake(true);
        return setTimeout((function(_this) {
          return function() {
            return _this.shouldShake(false);
          };
        })(this), 1000);
      };

      SigninExtra.prototype.assignUsername = function() {
        return auth.assignUsernameToUser(this.user().id, this.username());
      };

      SigninExtra.prototype.assignEmailAddress = function() {
        return auth.createVerifyEmailAddressToken(this.email());
      };

      SigninExtra.prototype.assignUsernameAndEmailAddress = function() {
        var tasks;
        if (this.isValidating()) {
          return;
        }
        if (!this.isValid()) {
          this.shake();
          this.errors.showAllMessages();
          return;
        }
        tasks = [];
        if (this.user().username !== this.username()) {
          tasks.push(this.assignUsername());
        }
        if (this.user().email !== this.email()) {
          tasks.push(this.assignEmailAddress());
        }
        return Q.allSettled(tasks).then((function(_this) {
          return function() {
            return router.navigate("#user/" + (_this.username()));
          };
        })(this));
      };

      return SigninExtra;

    })();
  });

}).call(this);
