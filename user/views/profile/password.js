// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  defineQ(['jquery', 'knockout', 'odo/auth', 'odo/auth/current-user'], function($, ko, auth, user) {
    var ChangeDisplayName;
    return ChangeDisplayName = (function() {
      function ChangeDisplayName() {
        this.changePassword = __bind(this.changePassword, this);
        this.back = __bind(this.back, this);
        this.activate = __bind(this.activate, this);
        this.user = ko.observable(null);
        this.oldPassword = ko.observable('').extend({
          required: true,
          validation: {
            async: true,
            validator: (function(_this) {
              return function(password, param, callback) {
                return auth.testAuthentication(_this.user().username, password).then(function(result) {
                  return callback({
                    isValid: result.isValid,
                    message: result.message
                  });
                });
              };
            })(this)
          }
        });
        this.password = ko.observable('').extend({
          required: true,
          pattern: {
            params: '^.{8,}$',
            message: 'Eight or more letters for security'
          }
        });
        this.confirmPassword = ko.observable('').extend({
          equal: {
            params: this.password,
            message: 'Type the same password here'
          }
        });
        this.errors = ko.validation.group(this);
      }

      ChangeDisplayName.prototype.activate = function(options) {
        this.wizard = options.wizard, this.dialog = options.dialog;
        return this.user(user);
      };

      ChangeDisplayName.prototype.back = function() {
        return this.wizard.back({
          model: 'views/user/profile/review'
        })();
      };

      ChangeDisplayName.prototype.changePassword = function() {
        if (this.isValidating()) {
          return;
        }
        if (!this.isValid()) {
          this.dialog.shake();
          this.errors.showAllMessages();
          return;
        }
        return auth.assignPasswordToUser(this.user().id, this.password()).then((function(_this) {
          return function() {
            return _this.back();
          };
        })(this));
      };

      return ChangeDisplayName;

    })();
  });

}).call(this);
