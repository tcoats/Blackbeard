// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['knockout', 'q', 'odo/auth', 'plugins/router', 'odo/inject'], function(ko, Q, auth, router, inject) {
    var ViewFeedbackOpportunity;
    return ViewFeedbackOpportunity = (function() {
      function ViewFeedbackOpportunity() {
        this.getFeedback = __bind(this.getFeedback, this);
        this.activate = __bind(this.activate, this);
        this.canActivate = __bind(this.canActivate, this);
      }

      ViewFeedbackOpportunity.prototype.title = ko.observable('');

      ViewFeedbackOpportunity.prototype.feedback = ko.observable(null);

      ViewFeedbackOpportunity.prototype.user = ko.observable(null);

      ViewFeedbackOpportunity.prototype.canActivate = function(id) {
        var dfd,
          _this = this;
        dfd = Q.defer();
        this.getFeedback(id).then(function(feedback) {
          return dfd.resolve(true);
        }).fail(function() {
          return dfd.resolve(false);
        });
        return dfd.promise;
      };

      ViewFeedbackOpportunity.prototype.activate = function(id) {
        var dfd,
          _this = this;
        dfd = Q.defer();
        auth.getUser().then(function(user) {
          return _this.getFeedback(id).then(function(feedback) {
            _this.user(user);
            _this.feedback(feedback);
            return dfd.resolve(true);
          });
        });
        return dfd.promise;
      };

      ViewFeedbackOpportunity.prototype.getFeedback = function(id) {
        return $.get("/view-feedback-opportunity/" + id);
      };

      return ViewFeedbackOpportunity;

    })();
  });

}).call(this);
