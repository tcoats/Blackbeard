// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['jquery', 'knockout', 'odo/auth', 'odo/auth/current-user'], function($, ko, auth, user) {
    var ChangeUsername;
    return ChangeUsername = (function() {
      function ChangeUsername() {
        this.changeUsername = __bind(this.changeUsername, this);
        this.back = __bind(this.back, this);
        this.activate = __bind(this.activate, this);
        this.user = ko.observable(null);
        this.username = ko.observable('').extend({
          required: true,
          validation: {
            async: true,
            validator: (function(_this) {
              return function(val, param, callback) {
                if ((_this.user().username != null) && _this.user().username === val) {
                  callback({
                    isValid: true,
                    message: 'Same username as existing'
                  });
                  return;
                }
                return auth.getUsernameAvailability(val).then(function(availibility) {
                  return callback({
                    isValid: availibility.isAvailable,
                    message: availibility.message
                  });
                });
              };
            })(this)
          }
        });
        this.errors = ko.validation.group(this);
      }

      ChangeUsername.prototype.activate = function(options) {
        this.wizard = options.wizard, this.dialog = options.dialog;
        this.user(user);
        if (user.username != null) {
          return this.username(user.username);
        }
      };

      ChangeUsername.prototype.back = function() {
        return this.wizard.back({
          model: 'views/user/profile/review'
        })();
      };

      ChangeUsername.prototype.changeUsername = function() {
        if (this.isValidating()) {
          return;
        }
        if (!this.isValid()) {
          this.dialog.shake();
          this.errors.showAllMessages();
          return;
        }
        if (this.user().username === this.username()) {
          this.back();
        }
        return auth.assignUsernameToUser(this.user().id, this.username()).then((function(_this) {
          return function() {
            return _this.back();
          };
        })(this));
      };

      return ChangeUsername;

    })();
  });

}).call(this);
